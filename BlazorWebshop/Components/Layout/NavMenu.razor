@using BlazorWebshop.Models.Entities
@using BlazorWebshop.Services
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject CategoryStateService CategoryState
@inject LocalCartService CartState
@inject ICategoryService CategoryService
@inject ILocalStorageService LocalStorage
@inject IShoppingCartService UserCartService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false)) 

<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
</head>

<nav class="navbar navbar-expand-md navbar-dark bg-dark mb-4">
    <div class="container-fluid">
        <a class="navbar-brand" href="">V&D</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>

                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Categorieën
                    </a>
                    <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="navbarDropdown">
                        @foreach (var category in categories)
                        {
                            <li>
                                <NavLink class="dropdown-item" href="@($"/categoryProducts/{category.Id}")">
                                    @category.Name
                                </NavLink>
                            </li>
                        }
                    </ul>
                </li>

                <AuthorizeView Roles="admin">
                <li class="nav-item">
                    <NavLink class="nav-link" href="categories">
                    Categorieënbeheer 
                    </NavLink>
                 </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="products">
                            Productenbeheer 
                        </NavLink>
                    </li>
            </AuthorizeView>
                </ul>
            <ul class="navbar-nav ms-auto mb-2 mb-md-0">
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                 <input type="hidden" name="ReturnUrl" value="@currentUrl" /> 
                                <button type="submit" class="nav-link nav-button">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                                </button>
                            </form>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Manage">
                                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> <i class="bi bi-person h2"> </i>
                            </NavLink>
                        </li>

                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Register">
                                <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Login">
                                <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                            </NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
                <li class="nav-item">
                    <NavLink class="nav-link" href="Account/Wishlist">
                        <i class="bi bi-suit-heart h2"></i>
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="shopping-cart">
                        <i class="bi bi-cart2 h2"></i>
                        <span class="badge badge-pill badge-light">@productCount</span>
                    </NavLink>
                </li>
            </ul>
        </div>
    </div>
</nav>

@code {
    private string? currentUrl;
    private int productCount = 0;
    private bool authenticated;
    private string userId;
    List<Category> categories = new List<Category>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SyncInitialization();
        try
        {
            categories = await CategoryService.GetAllCategoriesAsync();
            CategoryState.OnChange += UpdateCategories;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"NavMenu OnInitializedAsync Error: {ex.Message}");
        }
        var authState = await authenticationStateTask;
        var user = authState.User;

        authenticated = user.Identity?.IsAuthenticated ?? false;

        if (authenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        await LoadProductCount();
        CartState.OnChange += async () => await LoadProductCount();
        UserCartService.OnChange += async () => await LoadProductCount();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductCount();
            StateHasChanged();
        }
    }

    private async void UpdateCategories()
    {
        await InvokeAsync(async () =>
        {
            categories = await CategoryService.GetAllCategoriesAsync();
            StateHasChanged();
        });
    }

    private void SyncInitialization()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        CategoryState.OnChange -= UpdateCategories;
        NavigationManager.LocationChanged -= OnLocationChanged;
        CartState.OnChange -= async () => await LoadProductCount();
        UserCartService.OnChange -= async () => await LoadProductCount();
    }

    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task LoadProductCount()
    {
        if(authenticated)
        {
            productCount = await UserCartService.GetShoppingCartCountAsync(userId);
        } else
        {
            var cartItems = await CartState.GetCartItemsAsync();
            int totalQuantity = 0;

            foreach (var item in cartItems)
            {
                totalQuantity += item.Quantity;
            }

            productCount = totalQuantity;
        }
        Console.WriteLine("---------------------------------------");
        Console.WriteLine("LoadProductCount in NavMenu:" + productCount);
        Console.WriteLine("---------------------------------------");

        StateHasChanged();
    }
} 

