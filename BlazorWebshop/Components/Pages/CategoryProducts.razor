@page "/categoryProducts/{categoryId:int}"
@using BlazorWebshop.Models.Entities
@using BlazorWebshop.Services
@using System.Security.Claims
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject ILocalStorageService LocalStorage 
@inject IToastService ToastService
@inject IShoppingCartService UserCartService
@inject LocalCartService CartState
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<BlazoredToasts />

 <h3>@categoryName</h3> 

@if (Products != null && Products.Any())
{
    <table class="table">
                <thead>
                    <tr>
                        <th>Naam</th>
                        <th>Beschrijving</th>
                        <th>Prijs</th>
                        <th>Voorraad</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        <tr>
                            <td>@product.Name</td>
                            <td>@product.Description</td>
                            <td>@product.Price</td>
                            <td>@product.Stock</td>
                            <td>Wishlist</td>

                    @if (product.Stock > 0)
                    {
                        <td><button @onclick="() => AddToCart(product.Id)">Toevoegen</button></td>
                    } else
                    {
                        <td><button>Geen voorraad</button></td>
                    }

                        </tr>
                    }
                </tbody>
    </table>
}
else
{
    <p>Er zijn nog geen producten in deze categorie.</p>
}

@code {
    [Parameter] 
    public int categoryId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public Category Category { get; set; }
    public string categoryName;

    public List<Product> Products { get; set; }

    private bool authenticated;
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        Category = await CategoryService.GetCategoryByIdAsync(categoryId);
        categoryName = Category.Name;

        Products = await ProductService.GetProductsByCategoryAsync(categoryId);

        var authState = await authenticationStateTask;
        var user = authState.User;

        authenticated = user.Identity?.IsAuthenticated ?? false;

        if (authenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task AddToCart(int productId)
    {
        Product product = await ProductService.GetProductByIdAsync(productId);
        List<CartItem> cart;

        if (authenticated)
        {
            ShoppingCart shop_cart = await UserCartService.GetUserShoppingCartAsync(userId);
            cart = shop_cart.CartItems;
        } else
        {
            cart = await CartState.GetCartItemsAsync();
        }

        CartItem cartItem = cart.FirstOrDefault(item => item.ProductId == productId);

        if (cartItem != null && cartItem.Quantity >= product.Stock) 
        {
            ToastService.ShowError("Maximale hoeveelheid van dit product zit al in je winkelwagen.");
        } else
        {
           int newId = cart.Any() ? cart.Max(c => c.Id) + 1 : 1; // Unieke id genereren

            if (authenticated)
            {
                CartItem item = new CartItem
                    {
                        ProductId = productId,
                        Quantity = 1
                    };
                Console.WriteLine("------------------------------------");
                Console.WriteLine("Adding to user cart");
                Console.WriteLine("------------------------------------");
                await UserCartService.AddCartItemToUserCart(userId, item);
            }
            else
            {
                CartItem item = new CartItem
                    {
                        Id = newId,
                        ProductId = productId,
                        Product = product,
                        Quantity = 1
                    };
                await CartState.AddToCart(item);

            }

            ToastService.ShowSuccess($"{product.Name} toegevoegd aan winkelwagen.");
        }
    }
}
