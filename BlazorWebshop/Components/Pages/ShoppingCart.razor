@page "/shopping-cart"
@using BlazorWebshop.Models.Entities
@using BlazorWebshop.Services
@inject CartStateService CartService
@inject IProductService ProductService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Winkelmandje</PageTitle>
<h3 class="mb-3">Winkelmandje</h3>

@if (cartItems == null)
{
    <p>Laden...</p>
}
else if (cartItems.Count == 0)
{
    <p>Uw winkelwagentje is leeg.</p>
}
else
{

    <table class="table">
        <thead>
            <tr>
                <th>Naam</th>
                <th>Prijs</th>
                <th>Aantal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in cartItems)
            {
                <tr>
                    <td>@item.Product.Name</td>
                    <td>@item.Product.Price</td>
                    <td>@item.Quantity</td>
                    <td><button @onclick="() => RemoveFromCart(item)">Verwijderen</button></td>
                </tr>
            }
        </tbody>
    </table>
}

<h4>Verzendkosten: </h4>
<h4>Totaalprijs: </h4>

@code {
    private List<CartItem> cartItems = new();
    private bool isInitialized = false; // Om meerdere calls te voorkomen (Js interop error)

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            cartItems = await CartService.GetCartItemsAsync();
            isInitialized = true;
            StateHasChanged(); 
        }
    }

    private async Task RemoveFromCart(CartItem cartItem)
    {
        await CartService.RemoveFromCartAsync(cartItem);
        cartItems = await CartService.GetCartItemsAsync();

        await ProductService.IncreaseStockAsync(cartItem.ProductId);

        StateHasChanged();
    }
} 
