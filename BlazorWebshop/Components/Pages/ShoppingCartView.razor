@page "/shopping-cart"
@using BlazorWebshop.Models.Entities
@using BlazorWebshop.Services
@using System.Security.Claims
@inject LocalCartService CartService
@inject IShoppingCartService UserCartService 
@inject IProductService ProductService
@inject IToastService ToastService
@inject NotificationService NotificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<BlazoredToasts />

<PageTitle>Winkelmandje</PageTitle>
<h3 class="mb-3">Winkelmandje</h3>
 
@if (cartItems == null || cartItems.Any(i => i.Product == null))
{
    <p>Laden...</p>
}
else if (cartItems.Count == 0)
{
    <p>Uw winkelwagentje is leeg.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Naam</th>
                <th>Prijs p/s</th>
                <th>Totaalprijs</th>
                <th>Aantal</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (CartItem item in cartItems)
            {
                    <tr>
                        <td>@item.Product.Name</td>
                        <td>@item.Product.Price</td>
                        <td>@(@item.Product.Price * @item.Quantity)</td>
                        <td>
                            <EditForm Model="item">
                                <InputNumber id="quantity" @bind-Value="item.Quantity" @bind-Value:after="() => UpdateItem(item, item.Quantity)" />
                            </EditForm>
                        </td>
                        <td><button @onclick="() => RemoveFromCart(item)">Verwijderen</button></td>
                    </tr>
            }
        </tbody>
    </table>
} 

@* <h4>Verzendkosten: </h4> *@
<h4>Totaalprijs: @totalPrice </h4>

@if (cartItems.Count != 0)
{
    <button @onclick="() => PlaceOrder()">Bestellen</button>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private List<CartItem> cartItems = new();
    //private bool isInitialized = false; // Om meerdere calls te voorkomen (Js interop error)
    private bool authenticated;
    private string userId;
    decimal totalPrice = 0;
    private bool notificationShown = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        authenticated = user.Identity?.IsAuthenticated ?? false;

        if (authenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        CartService.OnChange += StateHasChanged;
        UserCartService.OnChange += StateHasChanged;
        await LoadCart();
    }

    // Zorg dat je straks bij bestellen nog een keer checkt of product nog bestaat
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!notificationShown)
            {
                notificationShown = true;
                await NotificationService.ShowNotification();
            }

            await LoadCart();
            // isInitialized = true;
            StateHasChanged(); // Kan weg als isinitialized weg is, doe je ook al in loadcart 
        }
    }

    private async Task<bool> LoadCart()
    {
        bool cartChanged = false;

        if (authenticated)
        {
            ShoppingCart cart = await UserCartService.GetUserShoppingCartAsync(userId);
            cartItems = cart.CartItems;
        } else
        {
            cartItems = await CartService.GetCartItemsAsync();
        }

        // Zorg dat producten uit winkelmandje worden gehaald als product inmiddels is verwijderd/aangepast/geen voorraad meer heeft
        var validCartItems = new List<CartItem>();
        foreach (var item in cartItems)
        {
            var product = await ProductService.GetProductByIdAsync(item.ProductId);
            if (product != null && product.Stock > 0)
            {
                item.Product = product;
                validCartItems.Add(item);
            }
            else
            {
                cartChanged = true;

                // Verwijder helemaal als niet bestaat
                if (authenticated)
                {
                    await UserCartService.RemoveCartItemFromUserCart(userId, item);
                }
                else
                {
                    await CartService.RemoveFromCartAsync(item);
                }

                ToastService.ShowError(item.Product.Name + "is niet meer beschikbaar en uit het mandje verwijderd.");
            }
        }
        cartItems = validCartItems;
        totalPrice = await GetTotalPrice(userId);
        StateHasChanged();

        return cartChanged;
    }

    private async Task PlaceOrder()
    {
        bool cartChanged = await LoadCart();
        if (cartChanged)
        {
            return;
        }

        if (authenticated)
        {
            NavigationManager.NavigateTo("/place-order", true);
        } else
        {
            // als niet ingelogd naar ben je al klant(inloggen) / Maak account aan/ Doorgaan zonder registreren pagina
            NavigationManager.NavigateTo("/checkout-entry", true);
        }
    }

    private async Task<decimal> GetTotalPrice(string userId)
    {
        decimal total = 0;

        if (authenticated)
        {
            total = await UserCartService.GetTotalCartPrice(userId);
        } else
        {
            total = await CartService.GetTotalCartPrice();
        }

        return total;
    }

    private async Task RemoveFromCart(CartItem cartItem)
    {
        if (authenticated)
        {
            await UserCartService.RemoveCartItemFromUserCart(userId, cartItem);
            ShoppingCart cart = await UserCartService.GetUserShoppingCartAsync(userId);
            cartItems = cart.CartItems;
        } else
        {
            await CartService.RemoveFromCartAsync(cartItem);
            cartItems = await CartService.GetCartItemsAsync();
        }

        await LoadCart();
        ToastService.ShowSuccess("Product verwijderd");
    }

    private async Task UpdateItem(CartItem cartItem, int quantity)
    {
        int stock;
        List<CartItem> originalCartItems;
        CartItem originalCartItem;

        if (authenticated)
        {
            ShoppingCart cart = await UserCartService.GetUserShoppingCartAsync(userId);
            originalCartItems = cart.CartItems;
            originalCartItem = originalCartItems.FirstOrDefault(item => item.Id == cartItem.Id);

            stock = originalCartItem.Product.Stock;
        } else
        {
            originalCartItems = await CartService.GetCartItemsAsync();
            originalCartItem = originalCartItems.FirstOrDefault(item => item.Id == cartItem.Id);

            stock = originalCartItem.Product.Stock;
        }

        if (quantity > stock)
        {
            cartItem.Quantity = stock;
            ToastService.ShowError("Maximale hoeveelheid van product bereikt");

        }
        else if (quantity < 1)
        {
            cartItem.Quantity = 1;
            ToastService.ShowError("U moet minimaal 1 invoeren, verwijder product anders");
        }
        else
        {
            if (authenticated)
            {
                await UserCartService.UpdateUserCartItemQuantity(userId, cartItem, quantity);
            } else
            {
                await CartService.UpdateCartItemQuantity(cartItem, quantity);
            }

            await LoadCart();
            ToastService.ShowSuccess("Product geupdate");
        }
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
        UserCartService.OnChange -= StateHasChanged;
    }
}
